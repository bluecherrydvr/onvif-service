import { EventEmitter } from 'events';
import { createClientAsync } from 'soap';
import { Server } from '../../server';
import { DeviceConnectionInfo } from './DeviceInfoService';

export class OnvifEventInterface extends EventEmitter {
    private eventClient: any;
    private pullPointClient: any;
    private pollingInterval: NodeJS.Timeout | null = null;
    private readonly POLL_INTERVAL = 5000; // 5 seconds

    constructor(private deviceInfo: DeviceConnectionInfo) {
        super();
    }

    async initialize(): Promise<string[]> {
        try {
            if (!DeviceInfoService.validateConnectionInfo(this.deviceInfo)) {
                throw new Error(`Invalid device connection info for device ${this.deviceInfo.id}`);
            }

            const eventServiceUrl = `http://${this.deviceInfo.ipAddress}:${this.deviceInfo.onvifPort}/onvif/event_service`;
            this.eventClient = await createClientAsync(eventServiceUrl, {
                username: this.deviceInfo.rtspUsername,
                password: this.deviceInfo.rtspPassword
            });

            const capabilities = await this.getEventCapabilities();
            const supportedEvents = await this.getEventTypes();

            if (this.supportsWSBaseNotification(capabilities)) {
                await this.setupWSBaseNotification();
            } else {
                await this.setupPullPointPolling();
            }

            return supportedEvents;
        } catch (error) {
            Server.Logs.error(`Failed to initialize ONVIF events: ${error}`);
            throw error;
        }
    }

    private async getEventCapabilities(): Promise<any> {
        try {
            const result = await this.eventClient.GetServiceCapabilitiesAsync();
            return result[0];
        } catch (error) {
            Server.Logs.error(`Failed to get event capabilities: ${error}`);
            throw error;
        }
    }

    private async getEventTypes(): Promise<string[]> {
        try {
            const result = await this.eventClient.GetEventPropertiesAsync();
            return this.parseTopicSet(result[0].TopicSet);
        } catch (error) {
            Server.Logs.error(`Failed to get event types: ${error}`);
            return [];
        }
    }

    private parseTopicSet(topicSet: any): string[] {
        const eventTypes: string[] = [];
        
        const processNode = (node: any, prefix: string = '') => {
            if (node.Topic) {
                for (const topic of Array.isArray(node.Topic) ? node.Topic : [node.Topic]) {
                    const topicName = prefix + topic.$.Name;
                    eventTypes.push(topicName);
                    
                    if (topic.Topic) {
                        processNode(topic, topicName + '/');
                    }
                }
            }
        };

        processNode(topicSet);
        return eventTypes;
    }

    private supportsWSBaseNotification(capabilities: any): boolean {
        return capabilities.WSSubscriptionPolicySupport === true;
    }

    private async setupWSBaseNotification(): Promise<void> {
        try {
            const subscribeRequest = {
                ConsumerReference: {
                    Address: `http://${this.deviceInfo.ipAddress}/OnvifEvents`
                },
                InitialTerminationTime: 'PT1H'
            };

            const response = await this.eventClient.SubscribeAsync(subscribeRequest);
            Server.Logs.info(`WS-BaseNotification subscription established for device ${this.deviceInfo.id}`);
            
            // Handle subscription response and setup event listeners
            this.setupWSEventListeners(response[0]);
        } catch (error) {
            Server.Logs.error(`Failed to setup WS-BaseNotification: ${error}`);
            throw error;
        }
    }

    private async setupPullPointPolling(): Promise<void> {
        try {
            const response = await this.eventClient.CreatePullPointSubscriptionAsync({
                InitialTerminationTime: 'PT1H'
            });
            
            this.pullPointClient = response[0];
            this.startPolling();
            
            Server.Logs.info(`PullPoint polling established for device ${this.deviceInfo.id}`);
        } catch (error) {
            Server.Logs.error(`Failed to setup PullPoint polling: ${error}`);
            throw error;
        }
    }

    private startPolling(): void {
        this.pollingInterval = setInterval(async () => {
            try {
                const response = await this.pullPointClient.PullMessagesAsync({
                    Timeout: 'PT4S',
                    MessageLimit: 100
                });

                if (response && response[0].NotificationMessage) {
                    const events = this.parseEvents(response[0].NotificationMessage);
                    this.emit('events', events);
                }
            } catch (error) {
                Server.Logs.error(`Polling error: ${error}`);
            }
        }, this.POLL_INTERVAL);
    }

    private parseEvents(notifications: any[]): any[] {
        return notifications.map(notification => ({
            topic: notification.Topic._.toString(),
            source: notification.Source,
            data: notification.Data,
            timestamp: new Date(notification.UtcTime).getTime()
        }));
    }

    stop(): void {
        if (this.pollingInterval) {
            clearInterval(this.pollingInterval);
            this.pollingInterval = null;
        }

        if (this.pullPointClient) {
            this.pullPointClient.Unsubscribe().catch((error: any) => {
                Server.Logs.error(`Failed to unsubscribe from PullPoint: ${error}`);
            });
        }

        if (this.eventClient) {
            this.eventClient.Unsubscribe().catch((error: any) => {
                Server.Logs.error(`Failed to unsubscribe from WS-BaseNotification: ${error}`);
            });
        }
    }
}

