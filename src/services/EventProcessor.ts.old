import { Server } from '../../server';
import { Events } from '../models/db/Events';

export class EventProcessor {
    static async processEvent(event: any): Promise<void> {
        try {
            this.validateEvent(event);

            switch(event.type_id) {
                case 'motion':
                    await this.handleMotionEvent(event);
                    break;
                case 'tampering':
                    await this.handleTamperingEvent(event);
                    break;
            }

            await Events.create({
                ...event,
                time: Math.floor(Date.now() / 1000)
            });

        } catch (error) {
            Server.Logs.error(`Event processing failed: ${error}`);
            throw error;
        }
    }

    private static validateEvent(event: any): void {
        if (!event.type_id) {
            throw new Error('Event type is required');
        }
    }

    private static async handleMotionEvent(event: any): Promise<void> {
        // Implementation for motion event handling
    }

    private static async handleTamperingEvent(event: any): Promise<void> {
        // Implementation for tampering event handling
    }
}

